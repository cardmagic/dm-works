-- 0.1.0
* Initial Public Release

-- 0.1.1
* Removed /lib/data_mapper/extensions
* Moved ActiveRecordImpersonation into DataMapper::Support module
* Moved CallbackHelper methods into DataMapper::Base class
* Moved ValidationHelper into DataMapper::Validations module
* Removed LoadedSet since it's not necessary for it to reference the Database, so it's nothing more than an array now; Replaced with Array
* Modified data_mapper.rb to load DataMapper::Support::Enumerable
* Modified example.rb and performance.rb to require 'lib/data_mapper' instead of modifying $LOADPATH
* Created SqlAdapter base-class
* Refactored MysqlAdapter to use SqlAdapter superclass
* Refactored Sqlite3Adapter to use SqlAdapter superclass
* Moved /lib/data_mapper/queries to /lib/data_mapper/adapters/sql/queries
* Moved Connection, Result and Reader classes along with Coersion and Quoting modules to DataMapper::Adapters::Sql module
* Moved DataMapper::Adapters::Sql::Queries to ::Commands
* Moved Mappings to SqlAdapter
* Added monolithic DeleteCommand
* Added monolithic SaveCommand
* Added TableExistsCommand
* Moved save/delete logic out of Session
* Added create-table functionality to SaveCommand
* Cleaned up Session; #find no longer supported, use #all or #first
* Moved object materialization into LoadCommand
* Migrated Sqlite3Adapter::Commands
* Added Session#query support back in
* Removed Connection/Reader/Result classes
* Set DataMapper::Base#key on load to avoid double-hit against Schema
* Added DataMapper::Support::Struct for increased Session#query performance
* Added AdvancedHasManyAssociation (preview status)
* Added benchmarks comparing ActiveRecord::Base::find_by_sql with Session#query

-- 0.2.0
* AdvancedHasManyAssociation now functional for fetches
* AdvancedHasManyAssociation renamed to HasNAssociation
* HasManyAssociation refactored to use HasNAssociation superclass
* Slight spec tweaks to accomodate the updates
* HasOneAssociation refactored to use HasNAssociation superclass
* Added HasAndBelongsToManyAssociation, using HasNAssociation as a basis; Need to add corresponding SQL generation code in AdvancedLoadCommand
* Added spec for habtm query generation
* HasNAssociation#foreign_key returns a DataMapper::Adapters::Sql::Mappings::Column instance instead of a raw String now
* Added table, association, association_table and to_sql methods to HasNAssociation
* Added associations_spec.rb
* Added a forced table-recreation to spec_helper.rb so the tests could run with a clean version of the database, including any new columns added to the models
* Added HasAndBelongsToManyAssociation#to_sql (all current specs pass now!)
* Minor tweaks to Callbacks
* Added CallbacksHelper to declare class-method ::callbacks on DataMapper::Base
* Implemented before_validate and after_validate hooks in ValidationHelper
* Minor documentation additions in callbacks.rb
* Added callbacks_spec
* Moved class-method declarations for built-in callbacks to the callbacks helper instead of DataMapper::Base
* Renamed :before/after_validate callback to :before/after_validation to match ActiveRecord
* Callbacks#add now accepts a Symbol which maps a callback to a method call on the targetted instance, also added a spec to verify this behavior
* Documented callbacks.rb
* Added DataMapper::Associations::Reference class
* Documented DataMapper::Associations::Reference class
* Upgraded BelongsToAssociation to new style
* Added AssociationsSet to handle simple "last-in" for association bindings
* Fixed extra spec loading
* Added *Association#columns
* Some refactoring in AdvancedLoadCommand regarding :include options
* Added support for class-less Mappings::Table instances, with just a string name
* HasAndBelongsToManyAssociation#join_table #left_foreign_key and #right_foreign_key reference actual Table or Column objects now
* Added :shallow_include option for HABTM joins in AdvancedLoadCommand and corresponding spec
* Added Commands::AdvancedConditions
* Added ORDER, LIMIT, OFFSET and WHERE support to AdvancedLoadCommand
* Renamed spec/has_many.rb to spec/has_many_spec.rb
* Tweaked the loading of has_many relationships; big performance boost; got rid of an extra query
* Added EmbeddedValue support, and accompanying spec